generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "postgresql"
  relationMode = "foreignKeys"
  directUrl    = env("POSTGRES_DIRECT_URL")
  url          = env("POSTGRES_URL")
}

enum Role {
  Admin
  User
}

enum ActivityTag {
  Camping
  Fishing
  Hiking
  Biking
}

enum NearbyTag {
  Pharmacy
  Groceries
  Bakery
  Hospital
}

model User {
  id              String  @id @default(cuid())
  username        String  @unique
  email           String  @unique
  password        String
  firstName       String
  lastName        String
  roles           Role[]
  phoneNumber     String?
  profileImageKey String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  favoritePosts FavoritePost[]

  @@map("users")
}

model Post {
  id            String        @id @default(cuid())
  title         String        @unique
  averageRating Float         @default(0)
  ratingsCount  Int           @default(0)
  activityTags  ActivityTag[]
  nearbyTags    NearbyTag[]
  imageKeys     String[]      @default([])
  locationLat   Float
  locationLong  Float
  description   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews       Review[]
  favoritePosts FavoritePost[]

  @@map("posts")
}

model FavoritePost {
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([postId, userId])
  @@map("favorite-posts")
}

model Review {
  postId String
  userId String
  rating Int
  text   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])

  @@id([postId, userId])
  @@map("reviews")
}
