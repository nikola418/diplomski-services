generator client {
  provider        = "prisma-client-js"
  engineType      = "binary"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "relationJoins", "nativeDistinct"]
  binaryTargets   = ["native"]
}

datasource db {
  provider     = "postgresql"
  relationMode = "foreignKeys"
  url          = env("POSTGRES_URL")
  directUrl    = env("POSTGRES_DIRECT_URL")
}

enum Role {
  Admin
  User
}

enum ActivityTag {
  Camping
  Fishing
  Hiking
  Biking
}

enum TripStatus {
  InPlanning
  Scheduled
  Finished
}

enum NearbyTag {
  Pharmacy
  Groceries
  Bakery
  Hospital
}

model User {
  id              String  @id @default(cuid())
  username        String  @unique
  email           String  @unique
  password        String
  firstName       String
  lastName        String
  roles           Role[]
  phoneNumber     String?
  profileImageKey String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favoritePosts     FavoritePost[]
  chatGroupMessages ChatGroupMessage[]
  chatGroupsMember  ChatGroupMember[]
  chatGroupsOwner   ChatGroup[]

  @@map("users")
}

model Post {
  id            String        @id @default(cuid())
  title         String        @unique
  averageRating Float         @default(0)
  ratingsCount  Int           @default(0)
  activityTags  ActivityTag[]
  nearbyTags    NearbyTag[]
  imageKeys     String[]      @default([])
  locationLat   Float
  locationLong  Float
  description   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews        Review[]
  favoritePosts  FavoritePost[]
  chatGroups     ChatGroup[]
  chatGroupTrips ChatGroupTrip[]

  @@map("posts")
}

model FavoritePost {
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([postId, userId])
  @@map("favorite-posts")
}

model Review {
  postId    String
  userId    String
  rating    Int
  text      String
  imageKeys String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])

  @@id([postId, userId])
  @@map("reviews")
}

model ChatGroup {
  id            String   @id @default(cuid())
  postId        String
  ownerUserId   String
  name          String?
  memberUserIds String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatGroupMessages ChatGroupMessage[]
  chatGroupMembers  ChatGroupMember[]
  chatGroupOwner    User               @relation(fields: [ownerUserId], references: [id])
  post              Post?              @relation(fields: [postId], references: [id])
  chatGroupTrips    ChatGroupTrip[]

  @@map("chat_groups")
}

model ChatGroupMember {
  chatGroupId String
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatGroup  ChatGroup @relation(fields: [chatGroupId], references: [id])
  memberUser User      @relation(fields: [userId], references: [id])

  @@id([chatGroupId, userId])
  @@map("chat_group_members")
}

model ChatGroupMessage {
  id           String @id @default(cuid())
  chatGroupId  String
  senderUserId String
  text         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatGroup  ChatGroup @relation(fields: [chatGroupId], references: [id])
  senderUser User      @relation(fields: [senderUserId], references: [id])

  @@map("chat_group_messages")
}

model ChatGroupTrip {
  chatGroupId       String
  postId            String
  name              String
  tripStatus        TripStatus @default(InPlanning)
  scheduledDateTime DateTime?

  chatGroup ChatGroup @relation(fields: [chatGroupId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])

  @@id([chatGroupId, postId])
  @@map("chat_group_trips")
}
