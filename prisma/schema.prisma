generator client {
  provider        = "prisma-client-js"
  engineType      = "binary"
  previewFeatures = ["fullTextSearch", "relationJoins", "nativeDistinct"]
  binaryTargets   = ["native"]
}

datasource db {
  provider     = "postgresql"
  relationMode = "foreignKeys"
  url          = env("POSTGRES_URL")
  directUrl    = env("POSTGRES_DIRECT_URL")
}

enum Role {
  Admin
  User
}

enum ActivityTag {
  Camping
  Fishing
  Hiking
  Biking
}

enum TripStatus {
  InPlanning
  Scheduled
  Finished
}

enum NearbyTag {
  Pharmacy
  Groceries
  Bakery
  Hospital
}

model User {
  id             String  @id @default(cuid())
  username       String  @unique
  email          String  @unique
  password       String
  firstName      String
  lastName       String
  roles          Role[]
  phoneNumber    String?
  avatarImageKey String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favoriteLocations FavoriteLocation[]
  chatGroupMessages ChatGroupMessage[]
  chatGroupsMember  ChatGroupMember[]
  chatGroupsOwner   ChatGroup[]
  reviews           Review[]
  createdTrips      Trip[]
  tripAttendances   TripAttendance[]

  @@map("users")
}

model Location {
  id            String        @id @default(cuid())
  title         String        @unique
  averageRating Float         @default(0)
  ratingsCount  Int           @default(0)
  activityTags  ActivityTag[]
  nearbyTags    NearbyTag[]
  imageKeys     String[]      @default([])
  lat           Float
  lng           Float
  description   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favoriteLocations FavoriteLocation[]
  trips             Trip[]
  nearbys           Nearby[]

  @@map("locations")
}

model Nearby {
  id         String    @id @default(cuid())
  locationId String
  nearbyTag  NearbyTag
  distance   Float?
  lat        Float?
  lng        Float?

  location Location @relation(fields: [locationId], references: [id])

  @@unique([locationId, nearbyTag])
  @@map("nearbys")
}

model FavoriteLocation {
  locationId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  location Location @relation(fields: [locationId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([locationId, userId])
  @@map("favorite_locations")
}

model Review {
  tripId    String
  userId    String
  rating    Int
  text      String
  imageKeys String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip Trip @relation(fields: [tripId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([tripId, userId])
  @@map("reviews")
}

model ChatGroup {
  id             String  @id @default(cuid())
  ownerUserId    String
  name           String
  avatarImageKey String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatGroupMessages ChatGroupMessage[]
  chatGroupMembers  ChatGroupMember[]
  chatGroupOwner    User               @relation(fields: [ownerUserId], references: [id])
  trips             Trip[]

  @@map("chat_groups")
}

model ChatGroupMember {
  chatGroupId String
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatGroup  ChatGroup @relation(fields: [chatGroupId], references: [id], onDelete: Cascade)
  memberUser User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatGroupId, userId])
  @@map("chat_group_members")
}

model ChatGroupMessage {
  id                 String  @id @default(cuid())
  chatGroupId        String
  senderUserId       String
  text               String
  repliedToMessageId String?
  tripId             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatGroup        ChatGroup          @relation(fields: [chatGroupId], references: [id], onDelete: Cascade)
  sender           User               @relation(fields: [senderUserId], references: [id])
  trip             Trip?              @relation(fields: [tripId], references: [id])
  repliedToMessage ChatGroupMessage?  @relation(name: "replies", fields: [repliedToMessageId], references: [id])
  repliesToMessage ChatGroupMessage[] @relation(name: "replies")

  @@map("chat_group_messages")
}

model Trip {
  id                String     @id @default(cuid())
  chatGroupId       String
  locationId        String
  creatorUserId     String
  tripStatus        TripStatus @default(InPlanning)
  name              String
  scheduledDateTime DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatGroup         ChatGroup          @relation(fields: [chatGroupId], references: [id], onDelete: Cascade)
  location          Location           @relation(fields: [locationId], references: [id])
  creator           User               @relation(fields: [creatorUserId], references: [id])
  reviews           Review[]
  chatGroupMessages ChatGroupMessage[]
  tripAttendances   TripAttendance[]

  @@map("chat_group_trips")
}

model TripAttendance {
  tripId String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@id([tripId, userId])
  @@map("trip_attendances")
}
